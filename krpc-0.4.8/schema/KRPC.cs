// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: protobuf/krpc.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace KRPC.Schema.KRPC {

  /// <summary>Holder for reflection information generated from protobuf/krpc.proto</summary>
  public static partial class KrpcReflection {

    #region Descriptor
    /// <summary>File descriptor for protobuf/krpc.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static KrpcReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChNwcm90b2J1Zi9rcnBjLnByb3RvEgtrcnBjLnNjaGVtYSKTAQoRQ29ubmVj",
            "dGlvblJlcXVlc3QSMQoEdHlwZRgBIAEoDjIjLmtycGMuc2NoZW1hLkNvbm5l",
            "Y3Rpb25SZXF1ZXN0LlR5cGUSEwoLY2xpZW50X25hbWUYAiABKAkSGQoRY2xp",
            "ZW50X2lkZW50aWZpZXIYAyABKAwiGwoEVHlwZRIHCgNSUEMQABIKCgZTVFJF",
            "QU0QASK+AQoSQ29ubmVjdGlvblJlc3BvbnNlEjYKBnN0YXR1cxgBIAEoDjIm",
            "LmtycGMuc2NoZW1hLkNvbm5lY3Rpb25SZXNwb25zZS5TdGF0dXMSDwoHbWVz",
            "c2FnZRgCIAEoCRIZChFjbGllbnRfaWRlbnRpZmllchgDIAEoDCJECgZTdGF0",
            "dXMSBgoCT0sQABIVChFNQUxGT1JNRURfTUVTU0FHRRABEgsKB1RJTUVPVVQQ",
            "AhIOCgpXUk9OR19UWVBFEAMiNAoHUmVxdWVzdBIpCgVjYWxscxgBIAMoCzIa",
            "LmtycGMuc2NoZW1hLlByb2NlZHVyZUNhbGwihwEKDVByb2NlZHVyZUNhbGwS",
            "DwoHc2VydmljZRgBIAEoCRIRCglwcm9jZWR1cmUYAiABKAkSEgoKc2Vydmlj",
            "ZV9pZBgEIAEoDRIUCgxwcm9jZWR1cmVfaWQYBSABKA0SKAoJYXJndW1lbnRz",
            "GAMgAygLMhUua3JwYy5zY2hlbWEuQXJndW1lbnQiKwoIQXJndW1lbnQSEAoI",
            "cG9zaXRpb24YASABKA0SDQoFdmFsdWUYAiABKAwiXAoIUmVzcG9uc2USIQoF",
            "ZXJyb3IYASABKAsyEi5rcnBjLnNjaGVtYS5FcnJvchItCgdyZXN1bHRzGAIg",
            "AygLMhwua3JwYy5zY2hlbWEuUHJvY2VkdXJlUmVzdWx0IkMKD1Byb2NlZHVy",
            "ZVJlc3VsdBIhCgVlcnJvchgBIAEoCzISLmtycGMuc2NoZW1hLkVycm9yEg0K",
            "BXZhbHVlGAIgASgMIlAKBUVycm9yEg8KB3NlcnZpY2UYASABKAkSDAoEbmFt",
            "ZRgCIAEoCRITCgtkZXNjcmlwdGlvbhgDIAEoCRITCgtzdGFja190cmFjZRgE",
            "IAEoCSI6CgxTdHJlYW1VcGRhdGUSKgoHcmVzdWx0cxgBIAMoCzIZLmtycGMu",
            "c2NoZW1hLlN0cmVhbVJlc3VsdCJICgxTdHJlYW1SZXN1bHQSCgoCaWQYASAB",
            "KAQSLAoGcmVzdWx0GAIgASgLMhwua3JwYy5zY2hlbWEuUHJvY2VkdXJlUmVz",
            "dWx0IjIKCFNlcnZpY2VzEiYKCHNlcnZpY2VzGAEgAygLMhQua3JwYy5zY2hl",
            "bWEuU2VydmljZSLbAQoHU2VydmljZRIMCgRuYW1lGAEgASgJEioKCnByb2Nl",
            "ZHVyZXMYAiADKAsyFi5rcnBjLnNjaGVtYS5Qcm9jZWR1cmUSIwoHY2xhc3Nl",
            "cxgDIAMoCzISLmtycGMuc2NoZW1hLkNsYXNzEi4KDGVudW1lcmF0aW9ucxgE",
            "IAMoCzIYLmtycGMuc2NoZW1hLkVudW1lcmF0aW9uEioKCmV4Y2VwdGlvbnMY",
            "BSADKAsyFi5rcnBjLnNjaGVtYS5FeGNlcHRpb24SFQoNZG9jdW1lbnRhdGlv",
            "bhgGIAEoCSLNAgoJUHJvY2VkdXJlEgwKBG5hbWUYASABKAkSKgoKcGFyYW1l",
            "dGVycxgCIAMoCzIWLmtycGMuc2NoZW1hLlBhcmFtZXRlchImCgtyZXR1cm5f",
            "dHlwZRgDIAEoCzIRLmtycGMuc2NoZW1hLlR5cGUSGgoScmV0dXJuX2lzX251",
            "bGxhYmxlGAQgASgIEjUKC2dhbWVfc2NlbmVzGAYgAygOMiAua3JwYy5zY2hl",
            "bWEuUHJvY2VkdXJlLkdhbWVTY2VuZRIVCg1kb2N1bWVudGF0aW9uGAUgASgJ",
            "InQKCUdhbWVTY2VuZRIQCgxTUEFDRV9DRU5URVIQABIKCgZGTElHSFQQARIU",
            "ChBUUkFDS0lOR19TVEFUSU9OEAISDgoKRURJVE9SX1ZBQhADEg4KCkVESVRP",
            "Ul9TUEgQBBITCg9NSVNTSU9OX0JVSUxERVIQBSJRCglQYXJhbWV0ZXISDAoE",
            "bmFtZRgBIAEoCRIfCgR0eXBlGAIgASgLMhEua3JwYy5zY2hlbWEuVHlwZRIV",
            "Cg1kZWZhdWx0X3ZhbHVlGAMgASgMIiwKBUNsYXNzEgwKBG5hbWUYASABKAkS",
            "FQoNZG9jdW1lbnRhdGlvbhgCIAEoCSJhCgtFbnVtZXJhdGlvbhIMCgRuYW1l",
            "GAEgASgJEi0KBnZhbHVlcxgCIAMoCzIdLmtycGMuc2NoZW1hLkVudW1lcmF0",
            "aW9uVmFsdWUSFQoNZG9jdW1lbnRhdGlvbhgDIAEoCSJGChBFbnVtZXJhdGlv",
            "blZhbHVlEgwKBG5hbWUYASABKAkSDQoFdmFsdWUYAiABKAUSFQoNZG9jdW1l",
            "bnRhdGlvbhgDIAEoCSIwCglFeGNlcHRpb24SDAoEbmFtZRgBIAEoCRIVCg1k",
            "b2N1bWVudGF0aW9uGAIgASgJIogDCgRUeXBlEigKBGNvZGUYASABKA4yGi5r",
            "cnBjLnNjaGVtYS5UeXBlLlR5cGVDb2RlEg8KB3NlcnZpY2UYAiABKAkSDAoE",
            "bmFtZRgDIAEoCRIgCgV0eXBlcxgEIAMoCzIRLmtycGMuc2NoZW1hLlR5cGUi",
            "lAIKCFR5cGVDb2RlEggKBE5PTkUQABIKCgZET1VCTEUQARIJCgVGTE9BVBAC",
            "EgoKBlNJTlQzMhADEgoKBlNJTlQ2NBAEEgoKBlVJTlQzMhAFEgoKBlVJTlQ2",
            "NBAGEggKBEJPT0wQBxIKCgZTVFJJTkcQCBIJCgVCWVRFUxAJEgkKBUNMQVNT",
            "EGQSDwoLRU5VTUVSQVRJT04QZRIKCgVFVkVOVBDIARITCg5QUk9DRURVUkVf",
            "Q0FMTBDJARILCgZTVFJFQU0QygESCwoGU1RBVFVTEMsBEg0KCFNFUlZJQ0VT",
            "EMwBEgoKBVRVUExFEKwCEgkKBExJU1QQrQISCAoDU0VUEK4CEg8KCkRJQ1RJ",
            "T05BUlkQrwIiFgoFVHVwbGUSDQoFaXRlbXMYASADKAwiFQoETGlzdBINCgVp",
            "dGVtcxgBIAMoDCIUCgNTZXQSDQoFaXRlbXMYASADKAwiOwoKRGljdGlvbmFy",
            "eRItCgdlbnRyaWVzGAEgAygLMhwua3JwYy5zY2hlbWEuRGljdGlvbmFyeUVu",
            "dHJ5Ii0KD0RpY3Rpb25hcnlFbnRyeRILCgNrZXkYASABKAwSDQoFdmFsdWUY",
            "AiABKAwiFAoGU3RyZWFtEgoKAmlkGAEgASgEIiwKBUV2ZW50EiMKBnN0cmVh",
            "bRgBIAEoCzITLmtycGMuc2NoZW1hLlN0cmVhbSL0AwoGU3RhdHVzEg8KB3Zl",
            "cnNpb24YASABKAkSEgoKYnl0ZXNfcmVhZBgCIAEoBBIVCg1ieXRlc193cml0",
            "dGVuGAMgASgEEhcKD2J5dGVzX3JlYWRfcmF0ZRgEIAEoAhIaChJieXRlc193",
            "cml0dGVuX3JhdGUYBSABKAISFQoNcnBjc19leGVjdXRlZBgGIAEoBBIQCghy",
            "cGNfcmF0ZRgHIAEoAhIaChJvbmVfcnBjX3Blcl91cGRhdGUYCCABKAgSGwoT",
            "bWF4X3RpbWVfcGVyX3VwZGF0ZRgJIAEoDRIdChVhZGFwdGl2ZV9yYXRlX2Nv",
            "bnRyb2wYCiABKAgSFQoNYmxvY2tpbmdfcmVjdhgLIAEoCBIUCgxyZWN2X3Rp",
            "bWVvdXQYDCABKA0SGwoTdGltZV9wZXJfcnBjX3VwZGF0ZRgNIAEoAhIgChhw",
            "b2xsX3RpbWVfcGVyX3JwY191cGRhdGUYDiABKAISIAoYZXhlY190aW1lX3Bl",
            "cl9ycGNfdXBkYXRlGA8gASgCEhMKC3N0cmVhbV9ycGNzGBAgASgNEhwKFHN0",
            "cmVhbV9ycGNzX2V4ZWN1dGVkGBEgASgEEhcKD3N0cmVhbV9ycGNfcmF0ZRgS",
            "IAEoAhIeChZ0aW1lX3Blcl9zdHJlYW1fdXBkYXRlGBMgASgCIncKEk11bHRp",
            "cGxleGVkUmVxdWVzdBI6ChJjb25uZWN0aW9uX3JlcXVlc3QYASABKAsyHi5r",
            "cnBjLnNjaGVtYS5Db25uZWN0aW9uUmVxdWVzdBIlCgdyZXF1ZXN0GAIgASgL",
            "MhQua3JwYy5zY2hlbWEuUmVxdWVzdCJwChNNdWx0aXBsZXhlZFJlc3BvbnNl",
            "EicKCHJlc3BvbnNlGAEgASgLMhUua3JwYy5zY2hlbWEuUmVzcG9uc2USMAoN",
            "c3RyZWFtX3VwZGF0ZRgCIAEoCzIZLmtycGMuc2NoZW1hLlN0cmVhbVVwZGF0",
            "ZUItCgtrcnBjLnNjaGVtYUIES1JQQ6ICBEtSUEOqAhBLUlBDLlNjaGVtYS5L",
            "UlBDYgZwcm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::KRPC.Schema.KRPC.ConnectionRequest), global::KRPC.Schema.KRPC.ConnectionRequest.Parser, new[]{ "Type", "ClientName", "ClientIdentifier" }, null, new[]{ typeof(global::KRPC.Schema.KRPC.ConnectionRequest.Types.Type) }, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::KRPC.Schema.KRPC.ConnectionResponse), global::KRPC.Schema.KRPC.ConnectionResponse.Parser, new[]{ "Status", "Message", "ClientIdentifier" }, null, new[]{ typeof(global::KRPC.Schema.KRPC.ConnectionResponse.Types.Status) }, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::KRPC.Schema.KRPC.Request), global::KRPC.Schema.KRPC.Request.Parser, new[]{ "Calls" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::KRPC.Schema.KRPC.ProcedureCall), global::KRPC.Schema.KRPC.ProcedureCall.Parser, new[]{ "Service", "Procedure", "ServiceId", "ProcedureId", "Arguments" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::KRPC.Schema.KRPC.Argument), global::KRPC.Schema.KRPC.Argument.Parser, new[]{ "Position", "Value" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::KRPC.Schema.KRPC.Response), global::KRPC.Schema.KRPC.Response.Parser, new[]{ "Error", "Results" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::KRPC.Schema.KRPC.ProcedureResult), global::KRPC.Schema.KRPC.ProcedureResult.Parser, new[]{ "Error", "Value" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::KRPC.Schema.KRPC.Error), global::KRPC.Schema.KRPC.Error.Parser, new[]{ "Service", "Name", "Description", "StackTrace" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::KRPC.Schema.KRPC.StreamUpdate), global::KRPC.Schema.KRPC.StreamUpdate.Parser, new[]{ "Results" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::KRPC.Schema.KRPC.StreamResult), global::KRPC.Schema.KRPC.StreamResult.Parser, new[]{ "Id", "Result" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::KRPC.Schema.KRPC.Services), global::KRPC.Schema.KRPC.Services.Parser, new[]{ "Services_" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::KRPC.Schema.KRPC.Service), global::KRPC.Schema.KRPC.Service.Parser, new[]{ "Name", "Procedures", "Classes", "Enumerations", "Exceptions", "Documentation" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::KRPC.Schema.KRPC.Procedure), global::KRPC.Schema.KRPC.Procedure.Parser, new[]{ "Name", "Parameters", "ReturnType", "ReturnIsNullable", "GameScenes", "Documentation" }, null, new[]{ typeof(global::KRPC.Schema.KRPC.Procedure.Types.GameScene) }, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::KRPC.Schema.KRPC.Parameter), global::KRPC.Schema.KRPC.Parameter.Parser, new[]{ "Name", "Type", "DefaultValue" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::KRPC.Schema.KRPC.Class), global::KRPC.Schema.KRPC.Class.Parser, new[]{ "Name", "Documentation" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::KRPC.Schema.KRPC.Enumeration), global::KRPC.Schema.KRPC.Enumeration.Parser, new[]{ "Name", "Values", "Documentation" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::KRPC.Schema.KRPC.EnumerationValue), global::KRPC.Schema.KRPC.EnumerationValue.Parser, new[]{ "Name", "Value", "Documentation" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::KRPC.Schema.KRPC.Exception), global::KRPC.Schema.KRPC.Exception.Parser, new[]{ "Name", "Documentation" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::KRPC.Schema.KRPC.Type), global::KRPC.Schema.KRPC.Type.Parser, new[]{ "Code", "Service", "Name", "Types_" }, null, new[]{ typeof(global::KRPC.Schema.KRPC.Type.Types.TypeCode) }, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::KRPC.Schema.KRPC.Tuple), global::KRPC.Schema.KRPC.Tuple.Parser, new[]{ "Items" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::KRPC.Schema.KRPC.List), global::KRPC.Schema.KRPC.List.Parser, new[]{ "Items" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::KRPC.Schema.KRPC.Set), global::KRPC.Schema.KRPC.Set.Parser, new[]{ "Items" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::KRPC.Schema.KRPC.Dictionary), global::KRPC.Schema.KRPC.Dictionary.Parser, new[]{ "Entries" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::KRPC.Schema.KRPC.DictionaryEntry), global::KRPC.Schema.KRPC.DictionaryEntry.Parser, new[]{ "Key", "Value" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::KRPC.Schema.KRPC.Stream), global::KRPC.Schema.KRPC.Stream.Parser, new[]{ "Id" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::KRPC.Schema.KRPC.Event), global::KRPC.Schema.KRPC.Event.Parser, new[]{ "Stream" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::KRPC.Schema.KRPC.Status), global::KRPC.Schema.KRPC.Status.Parser, new[]{ "Version", "BytesRead", "BytesWritten", "BytesReadRate", "BytesWrittenRate", "RpcsExecuted", "RpcRate", "OneRpcPerUpdate", "MaxTimePerUpdate", "AdaptiveRateControl", "BlockingRecv", "RecvTimeout", "TimePerRpcUpdate", "PollTimePerRpcUpdate", "ExecTimePerRpcUpdate", "StreamRpcs", "StreamRpcsExecuted", "StreamRpcRate", "TimePerStreamUpdate" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::KRPC.Schema.KRPC.MultiplexedRequest), global::KRPC.Schema.KRPC.MultiplexedRequest.Parser, new[]{ "ConnectionRequest", "Request" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::KRPC.Schema.KRPC.MultiplexedResponse), global::KRPC.Schema.KRPC.MultiplexedResponse.Parser, new[]{ "Response", "StreamUpdate" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class ConnectionRequest : pb::IMessage<ConnectionRequest> {
    private static readonly pb::MessageParser<ConnectionRequest> _parser = new pb::MessageParser<ConnectionRequest>(() => new ConnectionRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ConnectionRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::KRPC.Schema.KRPC.KrpcReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ConnectionRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ConnectionRequest(ConnectionRequest other) : this() {
      type_ = other.type_;
      clientName_ = other.clientName_;
      clientIdentifier_ = other.clientIdentifier_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ConnectionRequest Clone() {
      return new ConnectionRequest(this);
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 1;
    private global::KRPC.Schema.KRPC.ConnectionRequest.Types.Type type_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::KRPC.Schema.KRPC.ConnectionRequest.Types.Type Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    /// <summary>Field number for the "client_name" field.</summary>
    public const int ClientNameFieldNumber = 2;
    private string clientName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ClientName {
      get { return clientName_; }
      set {
        clientName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "client_identifier" field.</summary>
    public const int ClientIdentifierFieldNumber = 3;
    private pb::ByteString clientIdentifier_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString ClientIdentifier {
      get { return clientIdentifier_; }
      set {
        clientIdentifier_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ConnectionRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ConnectionRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Type != other.Type) return false;
      if (ClientName != other.ClientName) return false;
      if (ClientIdentifier != other.ClientIdentifier) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Type != 0) hash ^= Type.GetHashCode();
      if (ClientName.Length != 0) hash ^= ClientName.GetHashCode();
      if (ClientIdentifier.Length != 0) hash ^= ClientIdentifier.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Type != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Type);
      }
      if (ClientName.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(ClientName);
      }
      if (ClientIdentifier.Length != 0) {
        output.WriteRawTag(26);
        output.WriteBytes(ClientIdentifier);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Type);
      }
      if (ClientName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ClientName);
      }
      if (ClientIdentifier.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(ClientIdentifier);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ConnectionRequest other) {
      if (other == null) {
        return;
      }
      if (other.Type != 0) {
        Type = other.Type;
      }
      if (other.ClientName.Length != 0) {
        ClientName = other.ClientName;
      }
      if (other.ClientIdentifier.Length != 0) {
        ClientIdentifier = other.ClientIdentifier;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            type_ = (global::KRPC.Schema.KRPC.ConnectionRequest.Types.Type) input.ReadEnum();
            break;
          }
          case 18: {
            ClientName = input.ReadString();
            break;
          }
          case 26: {
            ClientIdentifier = input.ReadBytes();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the ConnectionRequest message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum Type {
        [pbr::OriginalName("RPC")] Rpc = 0,
        [pbr::OriginalName("STREAM")] Stream = 1,
      }

    }
    #endregion

  }

  public sealed partial class ConnectionResponse : pb::IMessage<ConnectionResponse> {
    private static readonly pb::MessageParser<ConnectionResponse> _parser = new pb::MessageParser<ConnectionResponse>(() => new ConnectionResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ConnectionResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::KRPC.Schema.KRPC.KrpcReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ConnectionResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ConnectionResponse(ConnectionResponse other) : this() {
      status_ = other.status_;
      message_ = other.message_;
      clientIdentifier_ = other.clientIdentifier_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ConnectionResponse Clone() {
      return new ConnectionResponse(this);
    }

    /// <summary>Field number for the "status" field.</summary>
    public const int StatusFieldNumber = 1;
    private global::KRPC.Schema.KRPC.ConnectionResponse.Types.Status status_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::KRPC.Schema.KRPC.ConnectionResponse.Types.Status Status {
      get { return status_; }
      set {
        status_ = value;
      }
    }

    /// <summary>Field number for the "message" field.</summary>
    public const int MessageFieldNumber = 2;
    private string message_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Message {
      get { return message_; }
      set {
        message_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "client_identifier" field.</summary>
    public const int ClientIdentifierFieldNumber = 3;
    private pb::ByteString clientIdentifier_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString ClientIdentifier {
      get { return clientIdentifier_; }
      set {
        clientIdentifier_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ConnectionResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ConnectionResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Status != other.Status) return false;
      if (Message != other.Message) return false;
      if (ClientIdentifier != other.ClientIdentifier) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Status != 0) hash ^= Status.GetHashCode();
      if (Message.Length != 0) hash ^= Message.GetHashCode();
      if (ClientIdentifier.Length != 0) hash ^= ClientIdentifier.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Status != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Status);
      }
      if (Message.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Message);
      }
      if (ClientIdentifier.Length != 0) {
        output.WriteRawTag(26);
        output.WriteBytes(ClientIdentifier);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Status != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Status);
      }
      if (Message.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Message);
      }
      if (ClientIdentifier.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(ClientIdentifier);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ConnectionResponse other) {
      if (other == null) {
        return;
      }
      if (other.Status != 0) {
        Status = other.Status;
      }
      if (other.Message.Length != 0) {
        Message = other.Message;
      }
      if (other.ClientIdentifier.Length != 0) {
        ClientIdentifier = other.ClientIdentifier;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            status_ = (global::KRPC.Schema.KRPC.ConnectionResponse.Types.Status) input.ReadEnum();
            break;
          }
          case 18: {
            Message = input.ReadString();
            break;
          }
          case 26: {
            ClientIdentifier = input.ReadBytes();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the ConnectionResponse message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum Status {
        [pbr::OriginalName("OK")] Ok = 0,
        [pbr::OriginalName("MALFORMED_MESSAGE")] MalformedMessage = 1,
        [pbr::OriginalName("TIMEOUT")] Timeout = 2,
        [pbr::OriginalName("WRONG_TYPE")] WrongType = 3,
      }

    }
    #endregion

  }

  public sealed partial class Request : pb::IMessage<Request> {
    private static readonly pb::MessageParser<Request> _parser = new pb::MessageParser<Request>(() => new Request());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Request> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::KRPC.Schema.KRPC.KrpcReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Request() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Request(Request other) : this() {
      calls_ = other.calls_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Request Clone() {
      return new Request(this);
    }

    /// <summary>Field number for the "calls" field.</summary>
    public const int CallsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::KRPC.Schema.KRPC.ProcedureCall> _repeated_calls_codec
        = pb::FieldCodec.ForMessage(10, global::KRPC.Schema.KRPC.ProcedureCall.Parser);
    private readonly pbc::RepeatedField<global::KRPC.Schema.KRPC.ProcedureCall> calls_ = new pbc::RepeatedField<global::KRPC.Schema.KRPC.ProcedureCall>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::KRPC.Schema.KRPC.ProcedureCall> Calls {
      get { return calls_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Request);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Request other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!calls_.Equals(other.calls_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= calls_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      calls_.WriteTo(output, _repeated_calls_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += calls_.CalculateSize(_repeated_calls_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Request other) {
      if (other == null) {
        return;
      }
      calls_.Add(other.calls_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            calls_.AddEntriesFrom(input, _repeated_calls_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class ProcedureCall : pb::IMessage<ProcedureCall> {
    private static readonly pb::MessageParser<ProcedureCall> _parser = new pb::MessageParser<ProcedureCall>(() => new ProcedureCall());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ProcedureCall> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::KRPC.Schema.KRPC.KrpcReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ProcedureCall() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ProcedureCall(ProcedureCall other) : this() {
      service_ = other.service_;
      procedure_ = other.procedure_;
      serviceId_ = other.serviceId_;
      procedureId_ = other.procedureId_;
      arguments_ = other.arguments_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ProcedureCall Clone() {
      return new ProcedureCall(this);
    }

    /// <summary>Field number for the "service" field.</summary>
    public const int ServiceFieldNumber = 1;
    private string service_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Service {
      get { return service_; }
      set {
        service_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "procedure" field.</summary>
    public const int ProcedureFieldNumber = 2;
    private string procedure_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Procedure {
      get { return procedure_; }
      set {
        procedure_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "service_id" field.</summary>
    public const int ServiceIdFieldNumber = 4;
    private uint serviceId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ServiceId {
      get { return serviceId_; }
      set {
        serviceId_ = value;
      }
    }

    /// <summary>Field number for the "procedure_id" field.</summary>
    public const int ProcedureIdFieldNumber = 5;
    private uint procedureId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ProcedureId {
      get { return procedureId_; }
      set {
        procedureId_ = value;
      }
    }

    /// <summary>Field number for the "arguments" field.</summary>
    public const int ArgumentsFieldNumber = 3;
    private static readonly pb::FieldCodec<global::KRPC.Schema.KRPC.Argument> _repeated_arguments_codec
        = pb::FieldCodec.ForMessage(26, global::KRPC.Schema.KRPC.Argument.Parser);
    private readonly pbc::RepeatedField<global::KRPC.Schema.KRPC.Argument> arguments_ = new pbc::RepeatedField<global::KRPC.Schema.KRPC.Argument>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::KRPC.Schema.KRPC.Argument> Arguments {
      get { return arguments_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ProcedureCall);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ProcedureCall other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Service != other.Service) return false;
      if (Procedure != other.Procedure) return false;
      if (ServiceId != other.ServiceId) return false;
      if (ProcedureId != other.ProcedureId) return false;
      if(!arguments_.Equals(other.arguments_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Service.Length != 0) hash ^= Service.GetHashCode();
      if (Procedure.Length != 0) hash ^= Procedure.GetHashCode();
      if (ServiceId != 0) hash ^= ServiceId.GetHashCode();
      if (ProcedureId != 0) hash ^= ProcedureId.GetHashCode();
      hash ^= arguments_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Service.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Service);
      }
      if (Procedure.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Procedure);
      }
      arguments_.WriteTo(output, _repeated_arguments_codec);
      if (ServiceId != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(ServiceId);
      }
      if (ProcedureId != 0) {
        output.WriteRawTag(40);
        output.WriteUInt32(ProcedureId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Service.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Service);
      }
      if (Procedure.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Procedure);
      }
      if (ServiceId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ServiceId);
      }
      if (ProcedureId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ProcedureId);
      }
      size += arguments_.CalculateSize(_repeated_arguments_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ProcedureCall other) {
      if (other == null) {
        return;
      }
      if (other.Service.Length != 0) {
        Service = other.Service;
      }
      if (other.Procedure.Length != 0) {
        Procedure = other.Procedure;
      }
      if (other.ServiceId != 0) {
        ServiceId = other.ServiceId;
      }
      if (other.ProcedureId != 0) {
        ProcedureId = other.ProcedureId;
      }
      arguments_.Add(other.arguments_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Service = input.ReadString();
            break;
          }
          case 18: {
            Procedure = input.ReadString();
            break;
          }
          case 26: {
            arguments_.AddEntriesFrom(input, _repeated_arguments_codec);
            break;
          }
          case 32: {
            ServiceId = input.ReadUInt32();
            break;
          }
          case 40: {
            ProcedureId = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class Argument : pb::IMessage<Argument> {
    private static readonly pb::MessageParser<Argument> _parser = new pb::MessageParser<Argument>(() => new Argument());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Argument> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::KRPC.Schema.KRPC.KrpcReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Argument() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Argument(Argument other) : this() {
      position_ = other.position_;
      value_ = other.value_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Argument Clone() {
      return new Argument(this);
    }

    /// <summary>Field number for the "position" field.</summary>
    public const int PositionFieldNumber = 1;
    private uint position_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Position {
      get { return position_; }
      set {
        position_ = value;
      }
    }

    /// <summary>Field number for the "value" field.</summary>
    public const int ValueFieldNumber = 2;
    private pb::ByteString value_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Value {
      get { return value_; }
      set {
        value_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Argument);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Argument other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Position != other.Position) return false;
      if (Value != other.Value) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Position != 0) hash ^= Position.GetHashCode();
      if (Value.Length != 0) hash ^= Value.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Position != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Position);
      }
      if (Value.Length != 0) {
        output.WriteRawTag(18);
        output.WriteBytes(Value);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Position != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Position);
      }
      if (Value.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Value);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Argument other) {
      if (other == null) {
        return;
      }
      if (other.Position != 0) {
        Position = other.Position;
      }
      if (other.Value.Length != 0) {
        Value = other.Value;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Position = input.ReadUInt32();
            break;
          }
          case 18: {
            Value = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  public sealed partial class Response : pb::IMessage<Response> {
    private static readonly pb::MessageParser<Response> _parser = new pb::MessageParser<Response>(() => new Response());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Response> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::KRPC.Schema.KRPC.KrpcReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Response() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Response(Response other) : this() {
      error_ = other.error_ != null ? other.error_.Clone() : null;
      results_ = other.results_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Response Clone() {
      return new Response(this);
    }

    /// <summary>Field number for the "error" field.</summary>
    public const int ErrorFieldNumber = 1;
    private global::KRPC.Schema.KRPC.Error error_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::KRPC.Schema.KRPC.Error Error {
      get { return error_; }
      set {
        error_ = value;
      }
    }

    /// <summary>Field number for the "results" field.</summary>
    public const int ResultsFieldNumber = 2;
    private static readonly pb::FieldCodec<global::KRPC.Schema.KRPC.ProcedureResult> _repeated_results_codec
        = pb::FieldCodec.ForMessage(18, global::KRPC.Schema.KRPC.ProcedureResult.Parser);
    private readonly pbc::RepeatedField<global::KRPC.Schema.KRPC.ProcedureResult> results_ = new pbc::RepeatedField<global::KRPC.Schema.KRPC.ProcedureResult>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::KRPC.Schema.KRPC.ProcedureResult> Results {
      get { return results_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Response);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Response other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Error, other.Error)) return false;
      if(!results_.Equals(other.results_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (error_ != null) hash ^= Error.GetHashCode();
      hash ^= results_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (error_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Error);
      }
      results_.WriteTo(output, _repeated_results_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (error_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Error);
      }
      size += results_.CalculateSize(_repeated_results_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Response other) {
      if (other == null) {
        return;
      }
      if (other.error_ != null) {
        if (error_ == null) {
          error_ = new global::KRPC.Schema.KRPC.Error();
        }
        Error.MergeFrom(other.Error);
      }
      results_.Add(other.results_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (error_ == null) {
              error_ = new global::KRPC.Schema.KRPC.Error();
            }
            input.ReadMessage(error_);
            break;
          }
          case 18: {
            results_.AddEntriesFrom(input, _repeated_results_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class ProcedureResult : pb::IMessage<ProcedureResult> {
    private static readonly pb::MessageParser<ProcedureResult> _parser = new pb::MessageParser<ProcedureResult>(() => new ProcedureResult());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ProcedureResult> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::KRPC.Schema.KRPC.KrpcReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ProcedureResult() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ProcedureResult(ProcedureResult other) : this() {
      error_ = other.error_ != null ? other.error_.Clone() : null;
      value_ = other.value_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ProcedureResult Clone() {
      return new ProcedureResult(this);
    }

    /// <summary>Field number for the "error" field.</summary>
    public const int ErrorFieldNumber = 1;
    private global::KRPC.Schema.KRPC.Error error_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::KRPC.Schema.KRPC.Error Error {
      get { return error_; }
      set {
        error_ = value;
      }
    }

    /// <summary>Field number for the "value" field.</summary>
    public const int ValueFieldNumber = 2;
    private pb::ByteString value_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Value {
      get { return value_; }
      set {
        value_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ProcedureResult);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ProcedureResult other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Error, other.Error)) return false;
      if (Value != other.Value) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (error_ != null) hash ^= Error.GetHashCode();
      if (Value.Length != 0) hash ^= Value.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (error_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Error);
      }
      if (Value.Length != 0) {
        output.WriteRawTag(18);
        output.WriteBytes(Value);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (error_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Error);
      }
      if (Value.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Value);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ProcedureResult other) {
      if (other == null) {
        return;
      }
      if (other.error_ != null) {
        if (error_ == null) {
          error_ = new global::KRPC.Schema.KRPC.Error();
        }
        Error.MergeFrom(other.Error);
      }
      if (other.Value.Length != 0) {
        Value = other.Value;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (error_ == null) {
              error_ = new global::KRPC.Schema.KRPC.Error();
            }
            input.ReadMessage(error_);
            break;
          }
          case 18: {
            Value = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  public sealed partial class Error : pb::IMessage<Error> {
    private static readonly pb::MessageParser<Error> _parser = new pb::MessageParser<Error>(() => new Error());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Error> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::KRPC.Schema.KRPC.KrpcReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Error() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Error(Error other) : this() {
      service_ = other.service_;
      name_ = other.name_;
      description_ = other.description_;
      stackTrace_ = other.stackTrace_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Error Clone() {
      return new Error(this);
    }

    /// <summary>Field number for the "service" field.</summary>
    public const int ServiceFieldNumber = 1;
    private string service_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Service {
      get { return service_; }
      set {
        service_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 2;
    private string name_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "description" field.</summary>
    public const int DescriptionFieldNumber = 3;
    private string description_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Description {
      get { return description_; }
      set {
        description_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "stack_trace" field.</summary>
    public const int StackTraceFieldNumber = 4;
    private string stackTrace_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string StackTrace {
      get { return stackTrace_; }
      set {
        stackTrace_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Error);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Error other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Service != other.Service) return false;
      if (Name != other.Name) return false;
      if (Description != other.Description) return false;
      if (StackTrace != other.StackTrace) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Service.Length != 0) hash ^= Service.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (Description.Length != 0) hash ^= Description.GetHashCode();
      if (StackTrace.Length != 0) hash ^= StackTrace.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Service.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Service);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Name);
      }
      if (Description.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Description);
      }
      if (StackTrace.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(StackTrace);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Service.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Service);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (Description.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Description);
      }
      if (StackTrace.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(StackTrace);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Error other) {
      if (other == null) {
        return;
      }
      if (other.Service.Length != 0) {
        Service = other.Service;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.Description.Length != 0) {
        Description = other.Description;
      }
      if (other.StackTrace.Length != 0) {
        StackTrace = other.StackTrace;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Service = input.ReadString();
            break;
          }
          case 18: {
            Name = input.ReadString();
            break;
          }
          case 26: {
            Description = input.ReadString();
            break;
          }
          case 34: {
            StackTrace = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class StreamUpdate : pb::IMessage<StreamUpdate> {
    private static readonly pb::MessageParser<StreamUpdate> _parser = new pb::MessageParser<StreamUpdate>(() => new StreamUpdate());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<StreamUpdate> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::KRPC.Schema.KRPC.KrpcReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StreamUpdate() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StreamUpdate(StreamUpdate other) : this() {
      results_ = other.results_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StreamUpdate Clone() {
      return new StreamUpdate(this);
    }

    /// <summary>Field number for the "results" field.</summary>
    public const int ResultsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::KRPC.Schema.KRPC.StreamResult> _repeated_results_codec
        = pb::FieldCodec.ForMessage(10, global::KRPC.Schema.KRPC.StreamResult.Parser);
    private readonly pbc::RepeatedField<global::KRPC.Schema.KRPC.StreamResult> results_ = new pbc::RepeatedField<global::KRPC.Schema.KRPC.StreamResult>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::KRPC.Schema.KRPC.StreamResult> Results {
      get { return results_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as StreamUpdate);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(StreamUpdate other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!results_.Equals(other.results_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= results_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      results_.WriteTo(output, _repeated_results_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += results_.CalculateSize(_repeated_results_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(StreamUpdate other) {
      if (other == null) {
        return;
      }
      results_.Add(other.results_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            results_.AddEntriesFrom(input, _repeated_results_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class StreamResult : pb::IMessage<StreamResult> {
    private static readonly pb::MessageParser<StreamResult> _parser = new pb::MessageParser<StreamResult>(() => new StreamResult());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<StreamResult> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::KRPC.Schema.KRPC.KrpcReflection.Descriptor.MessageTypes[9]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StreamResult() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StreamResult(StreamResult other) : this() {
      id_ = other.id_;
      result_ = other.result_ != null ? other.result_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StreamResult Clone() {
      return new StreamResult(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private ulong id_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "result" field.</summary>
    public const int ResultFieldNumber = 2;
    private global::KRPC.Schema.KRPC.ProcedureResult result_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::KRPC.Schema.KRPC.ProcedureResult Result {
      get { return result_; }
      set {
        result_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as StreamResult);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(StreamResult other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (!object.Equals(Result, other.Result)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0UL) hash ^= Id.GetHashCode();
      if (result_ != null) hash ^= Result.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(Id);
      }
      if (result_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Result);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Id);
      }
      if (result_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Result);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(StreamResult other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0UL) {
        Id = other.Id;
      }
      if (other.result_ != null) {
        if (result_ == null) {
          result_ = new global::KRPC.Schema.KRPC.ProcedureResult();
        }
        Result.MergeFrom(other.Result);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Id = input.ReadUInt64();
            break;
          }
          case 18: {
            if (result_ == null) {
              result_ = new global::KRPC.Schema.KRPC.ProcedureResult();
            }
            input.ReadMessage(result_);
            break;
          }
        }
      }
    }

  }

  public sealed partial class Services : pb::IMessage<Services> {
    private static readonly pb::MessageParser<Services> _parser = new pb::MessageParser<Services>(() => new Services());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Services> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::KRPC.Schema.KRPC.KrpcReflection.Descriptor.MessageTypes[10]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Services() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Services(Services other) : this() {
      services_ = other.services_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Services Clone() {
      return new Services(this);
    }

    /// <summary>Field number for the "services" field.</summary>
    public const int Services_FieldNumber = 1;
    private static readonly pb::FieldCodec<global::KRPC.Schema.KRPC.Service> _repeated_services_codec
        = pb::FieldCodec.ForMessage(10, global::KRPC.Schema.KRPC.Service.Parser);
    private readonly pbc::RepeatedField<global::KRPC.Schema.KRPC.Service> services_ = new pbc::RepeatedField<global::KRPC.Schema.KRPC.Service>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::KRPC.Schema.KRPC.Service> Services_ {
      get { return services_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Services);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Services other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!services_.Equals(other.services_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= services_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      services_.WriteTo(output, _repeated_services_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += services_.CalculateSize(_repeated_services_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Services other) {
      if (other == null) {
        return;
      }
      services_.Add(other.services_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            services_.AddEntriesFrom(input, _repeated_services_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class Service : pb::IMessage<Service> {
    private static readonly pb::MessageParser<Service> _parser = new pb::MessageParser<Service>(() => new Service());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Service> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::KRPC.Schema.KRPC.KrpcReflection.Descriptor.MessageTypes[11]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Service() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Service(Service other) : this() {
      name_ = other.name_;
      procedures_ = other.procedures_.Clone();
      classes_ = other.classes_.Clone();
      enumerations_ = other.enumerations_.Clone();
      exceptions_ = other.exceptions_.Clone();
      documentation_ = other.documentation_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Service Clone() {
      return new Service(this);
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 1;
    private string name_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "procedures" field.</summary>
    public const int ProceduresFieldNumber = 2;
    private static readonly pb::FieldCodec<global::KRPC.Schema.KRPC.Procedure> _repeated_procedures_codec
        = pb::FieldCodec.ForMessage(18, global::KRPC.Schema.KRPC.Procedure.Parser);
    private readonly pbc::RepeatedField<global::KRPC.Schema.KRPC.Procedure> procedures_ = new pbc::RepeatedField<global::KRPC.Schema.KRPC.Procedure>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::KRPC.Schema.KRPC.Procedure> Procedures {
      get { return procedures_; }
    }

    /// <summary>Field number for the "classes" field.</summary>
    public const int ClassesFieldNumber = 3;
    private static readonly pb::FieldCodec<global::KRPC.Schema.KRPC.Class> _repeated_classes_codec
        = pb::FieldCodec.ForMessage(26, global::KRPC.Schema.KRPC.Class.Parser);
    private readonly pbc::RepeatedField<global::KRPC.Schema.KRPC.Class> classes_ = new pbc::RepeatedField<global::KRPC.Schema.KRPC.Class>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::KRPC.Schema.KRPC.Class> Classes {
      get { return classes_; }
    }

    /// <summary>Field number for the "enumerations" field.</summary>
    public const int EnumerationsFieldNumber = 4;
    private static readonly pb::FieldCodec<global::KRPC.Schema.KRPC.Enumeration> _repeated_enumerations_codec
        = pb::FieldCodec.ForMessage(34, global::KRPC.Schema.KRPC.Enumeration.Parser);
    private readonly pbc::RepeatedField<global::KRPC.Schema.KRPC.Enumeration> enumerations_ = new pbc::RepeatedField<global::KRPC.Schema.KRPC.Enumeration>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::KRPC.Schema.KRPC.Enumeration> Enumerations {
      get { return enumerations_; }
    }

    /// <summary>Field number for the "exceptions" field.</summary>
    public const int ExceptionsFieldNumber = 5;
    private static readonly pb::FieldCodec<global::KRPC.Schema.KRPC.Exception> _repeated_exceptions_codec
        = pb::FieldCodec.ForMessage(42, global::KRPC.Schema.KRPC.Exception.Parser);
    private readonly pbc::RepeatedField<global::KRPC.Schema.KRPC.Exception> exceptions_ = new pbc::RepeatedField<global::KRPC.Schema.KRPC.Exception>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::KRPC.Schema.KRPC.Exception> Exceptions {
      get { return exceptions_; }
    }

    /// <summary>Field number for the "documentation" field.</summary>
    public const int DocumentationFieldNumber = 6;
    private string documentation_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Documentation {
      get { return documentation_; }
      set {
        documentation_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Service);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Service other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Name != other.Name) return false;
      if(!procedures_.Equals(other.procedures_)) return false;
      if(!classes_.Equals(other.classes_)) return false;
      if(!enumerations_.Equals(other.enumerations_)) return false;
      if(!exceptions_.Equals(other.exceptions_)) return false;
      if (Documentation != other.Documentation) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      hash ^= procedures_.GetHashCode();
      hash ^= classes_.GetHashCode();
      hash ^= enumerations_.GetHashCode();
      hash ^= exceptions_.GetHashCode();
      if (Documentation.Length != 0) hash ^= Documentation.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Name.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Name);
      }
      procedures_.WriteTo(output, _repeated_procedures_codec);
      classes_.WriteTo(output, _repeated_classes_codec);
      enumerations_.WriteTo(output, _repeated_enumerations_codec);
      exceptions_.WriteTo(output, _repeated_exceptions_codec);
      if (Documentation.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(Documentation);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      size += procedures_.CalculateSize(_repeated_procedures_codec);
      size += classes_.CalculateSize(_repeated_classes_codec);
      size += enumerations_.CalculateSize(_repeated_enumerations_codec);
      size += exceptions_.CalculateSize(_repeated_exceptions_codec);
      if (Documentation.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Documentation);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Service other) {
      if (other == null) {
        return;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      procedures_.Add(other.procedures_);
      classes_.Add(other.classes_);
      enumerations_.Add(other.enumerations_);
      exceptions_.Add(other.exceptions_);
      if (other.Documentation.Length != 0) {
        Documentation = other.Documentation;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Name = input.ReadString();
            break;
          }
          case 18: {
            procedures_.AddEntriesFrom(input, _repeated_procedures_codec);
            break;
          }
          case 26: {
            classes_.AddEntriesFrom(input, _repeated_classes_codec);
            break;
          }
          case 34: {
            enumerations_.AddEntriesFrom(input, _repeated_enumerations_codec);
            break;
          }
          case 42: {
            exceptions_.AddEntriesFrom(input, _repeated_exceptions_codec);
            break;
          }
          case 50: {
            Documentation = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class Procedure : pb::IMessage<Procedure> {
    private static readonly pb::MessageParser<Procedure> _parser = new pb::MessageParser<Procedure>(() => new Procedure());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Procedure> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::KRPC.Schema.KRPC.KrpcReflection.Descriptor.MessageTypes[12]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Procedure() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Procedure(Procedure other) : this() {
      name_ = other.name_;
      parameters_ = other.parameters_.Clone();
      returnType_ = other.returnType_ != null ? other.returnType_.Clone() : null;
      returnIsNullable_ = other.returnIsNullable_;
      gameScenes_ = other.gameScenes_.Clone();
      documentation_ = other.documentation_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Procedure Clone() {
      return new Procedure(this);
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 1;
    private string name_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "parameters" field.</summary>
    public const int ParametersFieldNumber = 2;
    private static readonly pb::FieldCodec<global::KRPC.Schema.KRPC.Parameter> _repeated_parameters_codec
        = pb::FieldCodec.ForMessage(18, global::KRPC.Schema.KRPC.Parameter.Parser);
    private readonly pbc::RepeatedField<global::KRPC.Schema.KRPC.Parameter> parameters_ = new pbc::RepeatedField<global::KRPC.Schema.KRPC.Parameter>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::KRPC.Schema.KRPC.Parameter> Parameters {
      get { return parameters_; }
    }

    /// <summary>Field number for the "return_type" field.</summary>
    public const int ReturnTypeFieldNumber = 3;
    private global::KRPC.Schema.KRPC.Type returnType_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::KRPC.Schema.KRPC.Type ReturnType {
      get { return returnType_; }
      set {
        returnType_ = value;
      }
    }

    /// <summary>Field number for the "return_is_nullable" field.</summary>
    public const int ReturnIsNullableFieldNumber = 4;
    private bool returnIsNullable_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool ReturnIsNullable {
      get { return returnIsNullable_; }
      set {
        returnIsNullable_ = value;
      }
    }

    /// <summary>Field number for the "game_scenes" field.</summary>
    public const int GameScenesFieldNumber = 6;
    private static readonly pb::FieldCodec<global::KRPC.Schema.KRPC.Procedure.Types.GameScene> _repeated_gameScenes_codec
        = pb::FieldCodec.ForEnum(50, x => (int) x, x => (global::KRPC.Schema.KRPC.Procedure.Types.GameScene) x);
    private readonly pbc::RepeatedField<global::KRPC.Schema.KRPC.Procedure.Types.GameScene> gameScenes_ = new pbc::RepeatedField<global::KRPC.Schema.KRPC.Procedure.Types.GameScene>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::KRPC.Schema.KRPC.Procedure.Types.GameScene> GameScenes {
      get { return gameScenes_; }
    }

    /// <summary>Field number for the "documentation" field.</summary>
    public const int DocumentationFieldNumber = 5;
    private string documentation_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Documentation {
      get { return documentation_; }
      set {
        documentation_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Procedure);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Procedure other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Name != other.Name) return false;
      if(!parameters_.Equals(other.parameters_)) return false;
      if (!object.Equals(ReturnType, other.ReturnType)) return false;
      if (ReturnIsNullable != other.ReturnIsNullable) return false;
      if(!gameScenes_.Equals(other.gameScenes_)) return false;
      if (Documentation != other.Documentation) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      hash ^= parameters_.GetHashCode();
      if (returnType_ != null) hash ^= ReturnType.GetHashCode();
      if (ReturnIsNullable != false) hash ^= ReturnIsNullable.GetHashCode();
      hash ^= gameScenes_.GetHashCode();
      if (Documentation.Length != 0) hash ^= Documentation.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Name.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Name);
      }
      parameters_.WriteTo(output, _repeated_parameters_codec);
      if (returnType_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(ReturnType);
      }
      if (ReturnIsNullable != false) {
        output.WriteRawTag(32);
        output.WriteBool(ReturnIsNullable);
      }
      if (Documentation.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(Documentation);
      }
      gameScenes_.WriteTo(output, _repeated_gameScenes_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      size += parameters_.CalculateSize(_repeated_parameters_codec);
      if (returnType_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ReturnType);
      }
      if (ReturnIsNullable != false) {
        size += 1 + 1;
      }
      size += gameScenes_.CalculateSize(_repeated_gameScenes_codec);
      if (Documentation.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Documentation);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Procedure other) {
      if (other == null) {
        return;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      parameters_.Add(other.parameters_);
      if (other.returnType_ != null) {
        if (returnType_ == null) {
          returnType_ = new global::KRPC.Schema.KRPC.Type();
        }
        ReturnType.MergeFrom(other.ReturnType);
      }
      if (other.ReturnIsNullable != false) {
        ReturnIsNullable = other.ReturnIsNullable;
      }
      gameScenes_.Add(other.gameScenes_);
      if (other.Documentation.Length != 0) {
        Documentation = other.Documentation;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Name = input.ReadString();
            break;
          }
          case 18: {
            parameters_.AddEntriesFrom(input, _repeated_parameters_codec);
            break;
          }
          case 26: {
            if (returnType_ == null) {
              returnType_ = new global::KRPC.Schema.KRPC.Type();
            }
            input.ReadMessage(returnType_);
            break;
          }
          case 32: {
            ReturnIsNullable = input.ReadBool();
            break;
          }
          case 42: {
            Documentation = input.ReadString();
            break;
          }
          case 50:
          case 48: {
            gameScenes_.AddEntriesFrom(input, _repeated_gameScenes_codec);
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the Procedure message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum GameScene {
        [pbr::OriginalName("SPACE_CENTER")] SpaceCenter = 0,
        [pbr::OriginalName("FLIGHT")] Flight = 1,
        [pbr::OriginalName("TRACKING_STATION")] TrackingStation = 2,
        [pbr::OriginalName("EDITOR_VAB")] EditorVab = 3,
        [pbr::OriginalName("EDITOR_SPH")] EditorSph = 4,
        [pbr::OriginalName("MISSION_BUILDER")] MissionBuilder = 5,
      }

    }
    #endregion

  }

  public sealed partial class Parameter : pb::IMessage<Parameter> {
    private static readonly pb::MessageParser<Parameter> _parser = new pb::MessageParser<Parameter>(() => new Parameter());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Parameter> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::KRPC.Schema.KRPC.KrpcReflection.Descriptor.MessageTypes[13]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Parameter() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Parameter(Parameter other) : this() {
      name_ = other.name_;
      type_ = other.type_ != null ? other.type_.Clone() : null;
      defaultValue_ = other.defaultValue_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Parameter Clone() {
      return new Parameter(this);
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 1;
    private string name_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 2;
    private global::KRPC.Schema.KRPC.Type type_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::KRPC.Schema.KRPC.Type Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    /// <summary>Field number for the "default_value" field.</summary>
    public const int DefaultValueFieldNumber = 3;
    private pb::ByteString defaultValue_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString DefaultValue {
      get { return defaultValue_; }
      set {
        defaultValue_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Parameter);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Parameter other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Name != other.Name) return false;
      if (!object.Equals(Type, other.Type)) return false;
      if (DefaultValue != other.DefaultValue) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (type_ != null) hash ^= Type.GetHashCode();
      if (DefaultValue.Length != 0) hash ^= DefaultValue.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Name.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Name);
      }
      if (type_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Type);
      }
      if (DefaultValue.Length != 0) {
        output.WriteRawTag(26);
        output.WriteBytes(DefaultValue);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (type_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Type);
      }
      if (DefaultValue.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(DefaultValue);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Parameter other) {
      if (other == null) {
        return;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.type_ != null) {
        if (type_ == null) {
          type_ = new global::KRPC.Schema.KRPC.Type();
        }
        Type.MergeFrom(other.Type);
      }
      if (other.DefaultValue.Length != 0) {
        DefaultValue = other.DefaultValue;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Name = input.ReadString();
            break;
          }
          case 18: {
            if (type_ == null) {
              type_ = new global::KRPC.Schema.KRPC.Type();
            }
            input.ReadMessage(type_);
            break;
          }
          case 26: {
            DefaultValue = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  public sealed partial class Class : pb::IMessage<Class> {
    private static readonly pb::MessageParser<Class> _parser = new pb::MessageParser<Class>(() => new Class());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Class> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::KRPC.Schema.KRPC.KrpcReflection.Descriptor.MessageTypes[14]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Class() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Class(Class other) : this() {
      name_ = other.name_;
      documentation_ = other.documentation_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Class Clone() {
      return new Class(this);
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 1;
    private string name_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "documentation" field.</summary>
    public const int DocumentationFieldNumber = 2;
    private string documentation_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Documentation {
      get { return documentation_; }
      set {
        documentation_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Class);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Class other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Name != other.Name) return false;
      if (Documentation != other.Documentation) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (Documentation.Length != 0) hash ^= Documentation.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Name.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Name);
      }
      if (Documentation.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Documentation);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (Documentation.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Documentation);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Class other) {
      if (other == null) {
        return;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.Documentation.Length != 0) {
        Documentation = other.Documentation;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Name = input.ReadString();
            break;
          }
          case 18: {
            Documentation = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class Enumeration : pb::IMessage<Enumeration> {
    private static readonly pb::MessageParser<Enumeration> _parser = new pb::MessageParser<Enumeration>(() => new Enumeration());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Enumeration> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::KRPC.Schema.KRPC.KrpcReflection.Descriptor.MessageTypes[15]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Enumeration() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Enumeration(Enumeration other) : this() {
      name_ = other.name_;
      values_ = other.values_.Clone();
      documentation_ = other.documentation_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Enumeration Clone() {
      return new Enumeration(this);
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 1;
    private string name_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "values" field.</summary>
    public const int ValuesFieldNumber = 2;
    private static readonly pb::FieldCodec<global::KRPC.Schema.KRPC.EnumerationValue> _repeated_values_codec
        = pb::FieldCodec.ForMessage(18, global::KRPC.Schema.KRPC.EnumerationValue.Parser);
    private readonly pbc::RepeatedField<global::KRPC.Schema.KRPC.EnumerationValue> values_ = new pbc::RepeatedField<global::KRPC.Schema.KRPC.EnumerationValue>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::KRPC.Schema.KRPC.EnumerationValue> Values {
      get { return values_; }
    }

    /// <summary>Field number for the "documentation" field.</summary>
    public const int DocumentationFieldNumber = 3;
    private string documentation_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Documentation {
      get { return documentation_; }
      set {
        documentation_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Enumeration);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Enumeration other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Name != other.Name) return false;
      if(!values_.Equals(other.values_)) return false;
      if (Documentation != other.Documentation) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      hash ^= values_.GetHashCode();
      if (Documentation.Length != 0) hash ^= Documentation.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Name.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Name);
      }
      values_.WriteTo(output, _repeated_values_codec);
      if (Documentation.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Documentation);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      size += values_.CalculateSize(_repeated_values_codec);
      if (Documentation.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Documentation);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Enumeration other) {
      if (other == null) {
        return;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      values_.Add(other.values_);
      if (other.Documentation.Length != 0) {
        Documentation = other.Documentation;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Name = input.ReadString();
            break;
          }
          case 18: {
            values_.AddEntriesFrom(input, _repeated_values_codec);
            break;
          }
          case 26: {
            Documentation = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class EnumerationValue : pb::IMessage<EnumerationValue> {
    private static readonly pb::MessageParser<EnumerationValue> _parser = new pb::MessageParser<EnumerationValue>(() => new EnumerationValue());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<EnumerationValue> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::KRPC.Schema.KRPC.KrpcReflection.Descriptor.MessageTypes[16]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EnumerationValue() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EnumerationValue(EnumerationValue other) : this() {
      name_ = other.name_;
      value_ = other.value_;
      documentation_ = other.documentation_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EnumerationValue Clone() {
      return new EnumerationValue(this);
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 1;
    private string name_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "value" field.</summary>
    public const int ValueFieldNumber = 2;
    private int value_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Value {
      get { return value_; }
      set {
        value_ = value;
      }
    }

    /// <summary>Field number for the "documentation" field.</summary>
    public const int DocumentationFieldNumber = 3;
    private string documentation_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Documentation {
      get { return documentation_; }
      set {
        documentation_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as EnumerationValue);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(EnumerationValue other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Name != other.Name) return false;
      if (Value != other.Value) return false;
      if (Documentation != other.Documentation) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (Value != 0) hash ^= Value.GetHashCode();
      if (Documentation.Length != 0) hash ^= Documentation.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Name.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Name);
      }
      if (Value != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Value);
      }
      if (Documentation.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Documentation);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (Value != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Value);
      }
      if (Documentation.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Documentation);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(EnumerationValue other) {
      if (other == null) {
        return;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.Value != 0) {
        Value = other.Value;
      }
      if (other.Documentation.Length != 0) {
        Documentation = other.Documentation;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Name = input.ReadString();
            break;
          }
          case 16: {
            Value = input.ReadInt32();
            break;
          }
          case 26: {
            Documentation = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class Exception : pb::IMessage<Exception> {
    private static readonly pb::MessageParser<Exception> _parser = new pb::MessageParser<Exception>(() => new Exception());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Exception> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::KRPC.Schema.KRPC.KrpcReflection.Descriptor.MessageTypes[17]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Exception() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Exception(Exception other) : this() {
      name_ = other.name_;
      documentation_ = other.documentation_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Exception Clone() {
      return new Exception(this);
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 1;
    private string name_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "documentation" field.</summary>
    public const int DocumentationFieldNumber = 2;
    private string documentation_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Documentation {
      get { return documentation_; }
      set {
        documentation_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Exception);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Exception other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Name != other.Name) return false;
      if (Documentation != other.Documentation) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (Documentation.Length != 0) hash ^= Documentation.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Name.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Name);
      }
      if (Documentation.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Documentation);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (Documentation.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Documentation);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Exception other) {
      if (other == null) {
        return;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.Documentation.Length != 0) {
        Documentation = other.Documentation;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Name = input.ReadString();
            break;
          }
          case 18: {
            Documentation = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class Type : pb::IMessage<Type> {
    private static readonly pb::MessageParser<Type> _parser = new pb::MessageParser<Type>(() => new Type());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Type> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::KRPC.Schema.KRPC.KrpcReflection.Descriptor.MessageTypes[18]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Type() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Type(Type other) : this() {
      code_ = other.code_;
      service_ = other.service_;
      name_ = other.name_;
      types_ = other.types_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Type Clone() {
      return new Type(this);
    }

    /// <summary>Field number for the "code" field.</summary>
    public const int CodeFieldNumber = 1;
    private global::KRPC.Schema.KRPC.Type.Types.TypeCode code_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::KRPC.Schema.KRPC.Type.Types.TypeCode Code {
      get { return code_; }
      set {
        code_ = value;
      }
    }

    /// <summary>Field number for the "service" field.</summary>
    public const int ServiceFieldNumber = 2;
    private string service_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Service {
      get { return service_; }
      set {
        service_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 3;
    private string name_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "types" field.</summary>
    public const int Types_FieldNumber = 4;
    private static readonly pb::FieldCodec<global::KRPC.Schema.KRPC.Type> _repeated_types_codec
        = pb::FieldCodec.ForMessage(34, global::KRPC.Schema.KRPC.Type.Parser);
    private readonly pbc::RepeatedField<global::KRPC.Schema.KRPC.Type> types_ = new pbc::RepeatedField<global::KRPC.Schema.KRPC.Type>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::KRPC.Schema.KRPC.Type> Types_ {
      get { return types_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Type);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Type other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Code != other.Code) return false;
      if (Service != other.Service) return false;
      if (Name != other.Name) return false;
      if(!types_.Equals(other.types_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Code != 0) hash ^= Code.GetHashCode();
      if (Service.Length != 0) hash ^= Service.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      hash ^= types_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Code != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Code);
      }
      if (Service.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Service);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Name);
      }
      types_.WriteTo(output, _repeated_types_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Code != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Code);
      }
      if (Service.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Service);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      size += types_.CalculateSize(_repeated_types_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Type other) {
      if (other == null) {
        return;
      }
      if (other.Code != 0) {
        Code = other.Code;
      }
      if (other.Service.Length != 0) {
        Service = other.Service;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      types_.Add(other.types_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            code_ = (global::KRPC.Schema.KRPC.Type.Types.TypeCode) input.ReadEnum();
            break;
          }
          case 18: {
            Service = input.ReadString();
            break;
          }
          case 26: {
            Name = input.ReadString();
            break;
          }
          case 34: {
            types_.AddEntriesFrom(input, _repeated_types_codec);
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the Type message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum TypeCode {
        [pbr::OriginalName("NONE")] None = 0,
        /// <summary>
        /// Values
        /// </summary>
        [pbr::OriginalName("DOUBLE")] Double = 1,
        [pbr::OriginalName("FLOAT")] Float = 2,
        [pbr::OriginalName("SINT32")] Sint32 = 3,
        [pbr::OriginalName("SINT64")] Sint64 = 4,
        [pbr::OriginalName("UINT32")] Uint32 = 5,
        [pbr::OriginalName("UINT64")] Uint64 = 6,
        [pbr::OriginalName("BOOL")] Bool = 7,
        [pbr::OriginalName("STRING")] String = 8,
        [pbr::OriginalName("BYTES")] Bytes = 9,
        /// <summary>
        /// Objects
        /// </summary>
        [pbr::OriginalName("CLASS")] Class = 100,
        [pbr::OriginalName("ENUMERATION")] Enumeration = 101,
        /// <summary>
        /// Messages
        /// </summary>
        [pbr::OriginalName("EVENT")] Event = 200,
        [pbr::OriginalName("PROCEDURE_CALL")] ProcedureCall = 201,
        [pbr::OriginalName("STREAM")] Stream = 202,
        [pbr::OriginalName("STATUS")] Status = 203,
        [pbr::OriginalName("SERVICES")] Services = 204,
        /// <summary>
        /// Collections
        /// </summary>
        [pbr::OriginalName("TUPLE")] Tuple = 300,
        [pbr::OriginalName("LIST")] List = 301,
        [pbr::OriginalName("SET")] Set = 302,
        [pbr::OriginalName("DICTIONARY")] Dictionary = 303,
      }

    }
    #endregion

  }

  public sealed partial class Tuple : pb::IMessage<Tuple> {
    private static readonly pb::MessageParser<Tuple> _parser = new pb::MessageParser<Tuple>(() => new Tuple());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Tuple> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::KRPC.Schema.KRPC.KrpcReflection.Descriptor.MessageTypes[19]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Tuple() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Tuple(Tuple other) : this() {
      items_ = other.items_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Tuple Clone() {
      return new Tuple(this);
    }

    /// <summary>Field number for the "items" field.</summary>
    public const int ItemsFieldNumber = 1;
    private static readonly pb::FieldCodec<pb::ByteString> _repeated_items_codec
        = pb::FieldCodec.ForBytes(10);
    private readonly pbc::RepeatedField<pb::ByteString> items_ = new pbc::RepeatedField<pb::ByteString>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<pb::ByteString> Items {
      get { return items_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Tuple);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Tuple other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!items_.Equals(other.items_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= items_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      items_.WriteTo(output, _repeated_items_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += items_.CalculateSize(_repeated_items_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Tuple other) {
      if (other == null) {
        return;
      }
      items_.Add(other.items_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            items_.AddEntriesFrom(input, _repeated_items_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class List : pb::IMessage<List> {
    private static readonly pb::MessageParser<List> _parser = new pb::MessageParser<List>(() => new List());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<List> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::KRPC.Schema.KRPC.KrpcReflection.Descriptor.MessageTypes[20]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public List() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public List(List other) : this() {
      items_ = other.items_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public List Clone() {
      return new List(this);
    }

    /// <summary>Field number for the "items" field.</summary>
    public const int ItemsFieldNumber = 1;
    private static readonly pb::FieldCodec<pb::ByteString> _repeated_items_codec
        = pb::FieldCodec.ForBytes(10);
    private readonly pbc::RepeatedField<pb::ByteString> items_ = new pbc::RepeatedField<pb::ByteString>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<pb::ByteString> Items {
      get { return items_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as List);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(List other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!items_.Equals(other.items_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= items_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      items_.WriteTo(output, _repeated_items_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += items_.CalculateSize(_repeated_items_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(List other) {
      if (other == null) {
        return;
      }
      items_.Add(other.items_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            items_.AddEntriesFrom(input, _repeated_items_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class Set : pb::IMessage<Set> {
    private static readonly pb::MessageParser<Set> _parser = new pb::MessageParser<Set>(() => new Set());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Set> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::KRPC.Schema.KRPC.KrpcReflection.Descriptor.MessageTypes[21]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Set() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Set(Set other) : this() {
      items_ = other.items_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Set Clone() {
      return new Set(this);
    }

    /// <summary>Field number for the "items" field.</summary>
    public const int ItemsFieldNumber = 1;
    private static readonly pb::FieldCodec<pb::ByteString> _repeated_items_codec
        = pb::FieldCodec.ForBytes(10);
    private readonly pbc::RepeatedField<pb::ByteString> items_ = new pbc::RepeatedField<pb::ByteString>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<pb::ByteString> Items {
      get { return items_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Set);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Set other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!items_.Equals(other.items_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= items_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      items_.WriteTo(output, _repeated_items_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += items_.CalculateSize(_repeated_items_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Set other) {
      if (other == null) {
        return;
      }
      items_.Add(other.items_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            items_.AddEntriesFrom(input, _repeated_items_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class Dictionary : pb::IMessage<Dictionary> {
    private static readonly pb::MessageParser<Dictionary> _parser = new pb::MessageParser<Dictionary>(() => new Dictionary());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Dictionary> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::KRPC.Schema.KRPC.KrpcReflection.Descriptor.MessageTypes[22]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Dictionary() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Dictionary(Dictionary other) : this() {
      entries_ = other.entries_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Dictionary Clone() {
      return new Dictionary(this);
    }

    /// <summary>Field number for the "entries" field.</summary>
    public const int EntriesFieldNumber = 1;
    private static readonly pb::FieldCodec<global::KRPC.Schema.KRPC.DictionaryEntry> _repeated_entries_codec
        = pb::FieldCodec.ForMessage(10, global::KRPC.Schema.KRPC.DictionaryEntry.Parser);
    private readonly pbc::RepeatedField<global::KRPC.Schema.KRPC.DictionaryEntry> entries_ = new pbc::RepeatedField<global::KRPC.Schema.KRPC.DictionaryEntry>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::KRPC.Schema.KRPC.DictionaryEntry> Entries {
      get { return entries_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Dictionary);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Dictionary other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!entries_.Equals(other.entries_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= entries_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      entries_.WriteTo(output, _repeated_entries_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += entries_.CalculateSize(_repeated_entries_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Dictionary other) {
      if (other == null) {
        return;
      }
      entries_.Add(other.entries_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            entries_.AddEntriesFrom(input, _repeated_entries_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class DictionaryEntry : pb::IMessage<DictionaryEntry> {
    private static readonly pb::MessageParser<DictionaryEntry> _parser = new pb::MessageParser<DictionaryEntry>(() => new DictionaryEntry());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DictionaryEntry> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::KRPC.Schema.KRPC.KrpcReflection.Descriptor.MessageTypes[23]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DictionaryEntry() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DictionaryEntry(DictionaryEntry other) : this() {
      key_ = other.key_;
      value_ = other.value_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DictionaryEntry Clone() {
      return new DictionaryEntry(this);
    }

    /// <summary>Field number for the "key" field.</summary>
    public const int KeyFieldNumber = 1;
    private pb::ByteString key_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Key {
      get { return key_; }
      set {
        key_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "value" field.</summary>
    public const int ValueFieldNumber = 2;
    private pb::ByteString value_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Value {
      get { return value_; }
      set {
        value_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DictionaryEntry);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DictionaryEntry other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Key != other.Key) return false;
      if (Value != other.Value) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Key.Length != 0) hash ^= Key.GetHashCode();
      if (Value.Length != 0) hash ^= Value.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Key.Length != 0) {
        output.WriteRawTag(10);
        output.WriteBytes(Key);
      }
      if (Value.Length != 0) {
        output.WriteRawTag(18);
        output.WriteBytes(Value);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Key.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Key);
      }
      if (Value.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Value);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DictionaryEntry other) {
      if (other == null) {
        return;
      }
      if (other.Key.Length != 0) {
        Key = other.Key;
      }
      if (other.Value.Length != 0) {
        Value = other.Value;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Key = input.ReadBytes();
            break;
          }
          case 18: {
            Value = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  public sealed partial class Stream : pb::IMessage<Stream> {
    private static readonly pb::MessageParser<Stream> _parser = new pb::MessageParser<Stream>(() => new Stream());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Stream> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::KRPC.Schema.KRPC.KrpcReflection.Descriptor.MessageTypes[24]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Stream() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Stream(Stream other) : this() {
      id_ = other.id_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Stream Clone() {
      return new Stream(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private ulong id_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Stream);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Stream other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0UL) hash ^= Id.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(Id);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Id);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Stream other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0UL) {
        Id = other.Id;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Id = input.ReadUInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class Event : pb::IMessage<Event> {
    private static readonly pb::MessageParser<Event> _parser = new pb::MessageParser<Event>(() => new Event());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Event> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::KRPC.Schema.KRPC.KrpcReflection.Descriptor.MessageTypes[25]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Event() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Event(Event other) : this() {
      stream_ = other.stream_ != null ? other.stream_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Event Clone() {
      return new Event(this);
    }

    /// <summary>Field number for the "stream" field.</summary>
    public const int StreamFieldNumber = 1;
    private global::KRPC.Schema.KRPC.Stream stream_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::KRPC.Schema.KRPC.Stream Stream {
      get { return stream_; }
      set {
        stream_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Event);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Event other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Stream, other.Stream)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (stream_ != null) hash ^= Stream.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (stream_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Stream);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (stream_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Stream);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Event other) {
      if (other == null) {
        return;
      }
      if (other.stream_ != null) {
        if (stream_ == null) {
          stream_ = new global::KRPC.Schema.KRPC.Stream();
        }
        Stream.MergeFrom(other.Stream);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (stream_ == null) {
              stream_ = new global::KRPC.Schema.KRPC.Stream();
            }
            input.ReadMessage(stream_);
            break;
          }
        }
      }
    }

  }

  public sealed partial class Status : pb::IMessage<Status> {
    private static readonly pb::MessageParser<Status> _parser = new pb::MessageParser<Status>(() => new Status());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Status> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::KRPC.Schema.KRPC.KrpcReflection.Descriptor.MessageTypes[26]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Status() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Status(Status other) : this() {
      version_ = other.version_;
      bytesRead_ = other.bytesRead_;
      bytesWritten_ = other.bytesWritten_;
      bytesReadRate_ = other.bytesReadRate_;
      bytesWrittenRate_ = other.bytesWrittenRate_;
      rpcsExecuted_ = other.rpcsExecuted_;
      rpcRate_ = other.rpcRate_;
      oneRpcPerUpdate_ = other.oneRpcPerUpdate_;
      maxTimePerUpdate_ = other.maxTimePerUpdate_;
      adaptiveRateControl_ = other.adaptiveRateControl_;
      blockingRecv_ = other.blockingRecv_;
      recvTimeout_ = other.recvTimeout_;
      timePerRpcUpdate_ = other.timePerRpcUpdate_;
      pollTimePerRpcUpdate_ = other.pollTimePerRpcUpdate_;
      execTimePerRpcUpdate_ = other.execTimePerRpcUpdate_;
      streamRpcs_ = other.streamRpcs_;
      streamRpcsExecuted_ = other.streamRpcsExecuted_;
      streamRpcRate_ = other.streamRpcRate_;
      timePerStreamUpdate_ = other.timePerStreamUpdate_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Status Clone() {
      return new Status(this);
    }

    /// <summary>Field number for the "version" field.</summary>
    public const int VersionFieldNumber = 1;
    private string version_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Version {
      get { return version_; }
      set {
        version_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "bytes_read" field.</summary>
    public const int BytesReadFieldNumber = 2;
    private ulong bytesRead_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong BytesRead {
      get { return bytesRead_; }
      set {
        bytesRead_ = value;
      }
    }

    /// <summary>Field number for the "bytes_written" field.</summary>
    public const int BytesWrittenFieldNumber = 3;
    private ulong bytesWritten_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong BytesWritten {
      get { return bytesWritten_; }
      set {
        bytesWritten_ = value;
      }
    }

    /// <summary>Field number for the "bytes_read_rate" field.</summary>
    public const int BytesReadRateFieldNumber = 4;
    private float bytesReadRate_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float BytesReadRate {
      get { return bytesReadRate_; }
      set {
        bytesReadRate_ = value;
      }
    }

    /// <summary>Field number for the "bytes_written_rate" field.</summary>
    public const int BytesWrittenRateFieldNumber = 5;
    private float bytesWrittenRate_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float BytesWrittenRate {
      get { return bytesWrittenRate_; }
      set {
        bytesWrittenRate_ = value;
      }
    }

    /// <summary>Field number for the "rpcs_executed" field.</summary>
    public const int RpcsExecutedFieldNumber = 6;
    private ulong rpcsExecuted_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong RpcsExecuted {
      get { return rpcsExecuted_; }
      set {
        rpcsExecuted_ = value;
      }
    }

    /// <summary>Field number for the "rpc_rate" field.</summary>
    public const int RpcRateFieldNumber = 7;
    private float rpcRate_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float RpcRate {
      get { return rpcRate_; }
      set {
        rpcRate_ = value;
      }
    }

    /// <summary>Field number for the "one_rpc_per_update" field.</summary>
    public const int OneRpcPerUpdateFieldNumber = 8;
    private bool oneRpcPerUpdate_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool OneRpcPerUpdate {
      get { return oneRpcPerUpdate_; }
      set {
        oneRpcPerUpdate_ = value;
      }
    }

    /// <summary>Field number for the "max_time_per_update" field.</summary>
    public const int MaxTimePerUpdateFieldNumber = 9;
    private uint maxTimePerUpdate_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint MaxTimePerUpdate {
      get { return maxTimePerUpdate_; }
      set {
        maxTimePerUpdate_ = value;
      }
    }

    /// <summary>Field number for the "adaptive_rate_control" field.</summary>
    public const int AdaptiveRateControlFieldNumber = 10;
    private bool adaptiveRateControl_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool AdaptiveRateControl {
      get { return adaptiveRateControl_; }
      set {
        adaptiveRateControl_ = value;
      }
    }

    /// <summary>Field number for the "blocking_recv" field.</summary>
    public const int BlockingRecvFieldNumber = 11;
    private bool blockingRecv_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool BlockingRecv {
      get { return blockingRecv_; }
      set {
        blockingRecv_ = value;
      }
    }

    /// <summary>Field number for the "recv_timeout" field.</summary>
    public const int RecvTimeoutFieldNumber = 12;
    private uint recvTimeout_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint RecvTimeout {
      get { return recvTimeout_; }
      set {
        recvTimeout_ = value;
      }
    }

    /// <summary>Field number for the "time_per_rpc_update" field.</summary>
    public const int TimePerRpcUpdateFieldNumber = 13;
    private float timePerRpcUpdate_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float TimePerRpcUpdate {
      get { return timePerRpcUpdate_; }
      set {
        timePerRpcUpdate_ = value;
      }
    }

    /// <summary>Field number for the "poll_time_per_rpc_update" field.</summary>
    public const int PollTimePerRpcUpdateFieldNumber = 14;
    private float pollTimePerRpcUpdate_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float PollTimePerRpcUpdate {
      get { return pollTimePerRpcUpdate_; }
      set {
        pollTimePerRpcUpdate_ = value;
      }
    }

    /// <summary>Field number for the "exec_time_per_rpc_update" field.</summary>
    public const int ExecTimePerRpcUpdateFieldNumber = 15;
    private float execTimePerRpcUpdate_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float ExecTimePerRpcUpdate {
      get { return execTimePerRpcUpdate_; }
      set {
        execTimePerRpcUpdate_ = value;
      }
    }

    /// <summary>Field number for the "stream_rpcs" field.</summary>
    public const int StreamRpcsFieldNumber = 16;
    private uint streamRpcs_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint StreamRpcs {
      get { return streamRpcs_; }
      set {
        streamRpcs_ = value;
      }
    }

    /// <summary>Field number for the "stream_rpcs_executed" field.</summary>
    public const int StreamRpcsExecutedFieldNumber = 17;
    private ulong streamRpcsExecuted_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong StreamRpcsExecuted {
      get { return streamRpcsExecuted_; }
      set {
        streamRpcsExecuted_ = value;
      }
    }

    /// <summary>Field number for the "stream_rpc_rate" field.</summary>
    public const int StreamRpcRateFieldNumber = 18;
    private float streamRpcRate_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float StreamRpcRate {
      get { return streamRpcRate_; }
      set {
        streamRpcRate_ = value;
      }
    }

    /// <summary>Field number for the "time_per_stream_update" field.</summary>
    public const int TimePerStreamUpdateFieldNumber = 19;
    private float timePerStreamUpdate_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float TimePerStreamUpdate {
      get { return timePerStreamUpdate_; }
      set {
        timePerStreamUpdate_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Status);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Status other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Version != other.Version) return false;
      if (BytesRead != other.BytesRead) return false;
      if (BytesWritten != other.BytesWritten) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(BytesReadRate, other.BytesReadRate)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(BytesWrittenRate, other.BytesWrittenRate)) return false;
      if (RpcsExecuted != other.RpcsExecuted) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(RpcRate, other.RpcRate)) return false;
      if (OneRpcPerUpdate != other.OneRpcPerUpdate) return false;
      if (MaxTimePerUpdate != other.MaxTimePerUpdate) return false;
      if (AdaptiveRateControl != other.AdaptiveRateControl) return false;
      if (BlockingRecv != other.BlockingRecv) return false;
      if (RecvTimeout != other.RecvTimeout) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(TimePerRpcUpdate, other.TimePerRpcUpdate)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(PollTimePerRpcUpdate, other.PollTimePerRpcUpdate)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(ExecTimePerRpcUpdate, other.ExecTimePerRpcUpdate)) return false;
      if (StreamRpcs != other.StreamRpcs) return false;
      if (StreamRpcsExecuted != other.StreamRpcsExecuted) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(StreamRpcRate, other.StreamRpcRate)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(TimePerStreamUpdate, other.TimePerStreamUpdate)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Version.Length != 0) hash ^= Version.GetHashCode();
      if (BytesRead != 0UL) hash ^= BytesRead.GetHashCode();
      if (BytesWritten != 0UL) hash ^= BytesWritten.GetHashCode();
      if (BytesReadRate != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(BytesReadRate);
      if (BytesWrittenRate != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(BytesWrittenRate);
      if (RpcsExecuted != 0UL) hash ^= RpcsExecuted.GetHashCode();
      if (RpcRate != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(RpcRate);
      if (OneRpcPerUpdate != false) hash ^= OneRpcPerUpdate.GetHashCode();
      if (MaxTimePerUpdate != 0) hash ^= MaxTimePerUpdate.GetHashCode();
      if (AdaptiveRateControl != false) hash ^= AdaptiveRateControl.GetHashCode();
      if (BlockingRecv != false) hash ^= BlockingRecv.GetHashCode();
      if (RecvTimeout != 0) hash ^= RecvTimeout.GetHashCode();
      if (TimePerRpcUpdate != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(TimePerRpcUpdate);
      if (PollTimePerRpcUpdate != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(PollTimePerRpcUpdate);
      if (ExecTimePerRpcUpdate != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(ExecTimePerRpcUpdate);
      if (StreamRpcs != 0) hash ^= StreamRpcs.GetHashCode();
      if (StreamRpcsExecuted != 0UL) hash ^= StreamRpcsExecuted.GetHashCode();
      if (StreamRpcRate != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(StreamRpcRate);
      if (TimePerStreamUpdate != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(TimePerStreamUpdate);
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Version.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Version);
      }
      if (BytesRead != 0UL) {
        output.WriteRawTag(16);
        output.WriteUInt64(BytesRead);
      }
      if (BytesWritten != 0UL) {
        output.WriteRawTag(24);
        output.WriteUInt64(BytesWritten);
      }
      if (BytesReadRate != 0F) {
        output.WriteRawTag(37);
        output.WriteFloat(BytesReadRate);
      }
      if (BytesWrittenRate != 0F) {
        output.WriteRawTag(45);
        output.WriteFloat(BytesWrittenRate);
      }
      if (RpcsExecuted != 0UL) {
        output.WriteRawTag(48);
        output.WriteUInt64(RpcsExecuted);
      }
      if (RpcRate != 0F) {
        output.WriteRawTag(61);
        output.WriteFloat(RpcRate);
      }
      if (OneRpcPerUpdate != false) {
        output.WriteRawTag(64);
        output.WriteBool(OneRpcPerUpdate);
      }
      if (MaxTimePerUpdate != 0) {
        output.WriteRawTag(72);
        output.WriteUInt32(MaxTimePerUpdate);
      }
      if (AdaptiveRateControl != false) {
        output.WriteRawTag(80);
        output.WriteBool(AdaptiveRateControl);
      }
      if (BlockingRecv != false) {
        output.WriteRawTag(88);
        output.WriteBool(BlockingRecv);
      }
      if (RecvTimeout != 0) {
        output.WriteRawTag(96);
        output.WriteUInt32(RecvTimeout);
      }
      if (TimePerRpcUpdate != 0F) {
        output.WriteRawTag(109);
        output.WriteFloat(TimePerRpcUpdate);
      }
      if (PollTimePerRpcUpdate != 0F) {
        output.WriteRawTag(117);
        output.WriteFloat(PollTimePerRpcUpdate);
      }
      if (ExecTimePerRpcUpdate != 0F) {
        output.WriteRawTag(125);
        output.WriteFloat(ExecTimePerRpcUpdate);
      }
      if (StreamRpcs != 0) {
        output.WriteRawTag(128, 1);
        output.WriteUInt32(StreamRpcs);
      }
      if (StreamRpcsExecuted != 0UL) {
        output.WriteRawTag(136, 1);
        output.WriteUInt64(StreamRpcsExecuted);
      }
      if (StreamRpcRate != 0F) {
        output.WriteRawTag(149, 1);
        output.WriteFloat(StreamRpcRate);
      }
      if (TimePerStreamUpdate != 0F) {
        output.WriteRawTag(157, 1);
        output.WriteFloat(TimePerStreamUpdate);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Version.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Version);
      }
      if (BytesRead != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(BytesRead);
      }
      if (BytesWritten != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(BytesWritten);
      }
      if (BytesReadRate != 0F) {
        size += 1 + 4;
      }
      if (BytesWrittenRate != 0F) {
        size += 1 + 4;
      }
      if (RpcsExecuted != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(RpcsExecuted);
      }
      if (RpcRate != 0F) {
        size += 1 + 4;
      }
      if (OneRpcPerUpdate != false) {
        size += 1 + 1;
      }
      if (MaxTimePerUpdate != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(MaxTimePerUpdate);
      }
      if (AdaptiveRateControl != false) {
        size += 1 + 1;
      }
      if (BlockingRecv != false) {
        size += 1 + 1;
      }
      if (RecvTimeout != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(RecvTimeout);
      }
      if (TimePerRpcUpdate != 0F) {
        size += 1 + 4;
      }
      if (PollTimePerRpcUpdate != 0F) {
        size += 1 + 4;
      }
      if (ExecTimePerRpcUpdate != 0F) {
        size += 1 + 4;
      }
      if (StreamRpcs != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(StreamRpcs);
      }
      if (StreamRpcsExecuted != 0UL) {
        size += 2 + pb::CodedOutputStream.ComputeUInt64Size(StreamRpcsExecuted);
      }
      if (StreamRpcRate != 0F) {
        size += 2 + 4;
      }
      if (TimePerStreamUpdate != 0F) {
        size += 2 + 4;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Status other) {
      if (other == null) {
        return;
      }
      if (other.Version.Length != 0) {
        Version = other.Version;
      }
      if (other.BytesRead != 0UL) {
        BytesRead = other.BytesRead;
      }
      if (other.BytesWritten != 0UL) {
        BytesWritten = other.BytesWritten;
      }
      if (other.BytesReadRate != 0F) {
        BytesReadRate = other.BytesReadRate;
      }
      if (other.BytesWrittenRate != 0F) {
        BytesWrittenRate = other.BytesWrittenRate;
      }
      if (other.RpcsExecuted != 0UL) {
        RpcsExecuted = other.RpcsExecuted;
      }
      if (other.RpcRate != 0F) {
        RpcRate = other.RpcRate;
      }
      if (other.OneRpcPerUpdate != false) {
        OneRpcPerUpdate = other.OneRpcPerUpdate;
      }
      if (other.MaxTimePerUpdate != 0) {
        MaxTimePerUpdate = other.MaxTimePerUpdate;
      }
      if (other.AdaptiveRateControl != false) {
        AdaptiveRateControl = other.AdaptiveRateControl;
      }
      if (other.BlockingRecv != false) {
        BlockingRecv = other.BlockingRecv;
      }
      if (other.RecvTimeout != 0) {
        RecvTimeout = other.RecvTimeout;
      }
      if (other.TimePerRpcUpdate != 0F) {
        TimePerRpcUpdate = other.TimePerRpcUpdate;
      }
      if (other.PollTimePerRpcUpdate != 0F) {
        PollTimePerRpcUpdate = other.PollTimePerRpcUpdate;
      }
      if (other.ExecTimePerRpcUpdate != 0F) {
        ExecTimePerRpcUpdate = other.ExecTimePerRpcUpdate;
      }
      if (other.StreamRpcs != 0) {
        StreamRpcs = other.StreamRpcs;
      }
      if (other.StreamRpcsExecuted != 0UL) {
        StreamRpcsExecuted = other.StreamRpcsExecuted;
      }
      if (other.StreamRpcRate != 0F) {
        StreamRpcRate = other.StreamRpcRate;
      }
      if (other.TimePerStreamUpdate != 0F) {
        TimePerStreamUpdate = other.TimePerStreamUpdate;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Version = input.ReadString();
            break;
          }
          case 16: {
            BytesRead = input.ReadUInt64();
            break;
          }
          case 24: {
            BytesWritten = input.ReadUInt64();
            break;
          }
          case 37: {
            BytesReadRate = input.ReadFloat();
            break;
          }
          case 45: {
            BytesWrittenRate = input.ReadFloat();
            break;
          }
          case 48: {
            RpcsExecuted = input.ReadUInt64();
            break;
          }
          case 61: {
            RpcRate = input.ReadFloat();
            break;
          }
          case 64: {
            OneRpcPerUpdate = input.ReadBool();
            break;
          }
          case 72: {
            MaxTimePerUpdate = input.ReadUInt32();
            break;
          }
          case 80: {
            AdaptiveRateControl = input.ReadBool();
            break;
          }
          case 88: {
            BlockingRecv = input.ReadBool();
            break;
          }
          case 96: {
            RecvTimeout = input.ReadUInt32();
            break;
          }
          case 109: {
            TimePerRpcUpdate = input.ReadFloat();
            break;
          }
          case 117: {
            PollTimePerRpcUpdate = input.ReadFloat();
            break;
          }
          case 125: {
            ExecTimePerRpcUpdate = input.ReadFloat();
            break;
          }
          case 128: {
            StreamRpcs = input.ReadUInt32();
            break;
          }
          case 136: {
            StreamRpcsExecuted = input.ReadUInt64();
            break;
          }
          case 149: {
            StreamRpcRate = input.ReadFloat();
            break;
          }
          case 157: {
            TimePerStreamUpdate = input.ReadFloat();
            break;
          }
        }
      }
    }

  }

  public sealed partial class MultiplexedRequest : pb::IMessage<MultiplexedRequest> {
    private static readonly pb::MessageParser<MultiplexedRequest> _parser = new pb::MessageParser<MultiplexedRequest>(() => new MultiplexedRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MultiplexedRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::KRPC.Schema.KRPC.KrpcReflection.Descriptor.MessageTypes[27]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MultiplexedRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MultiplexedRequest(MultiplexedRequest other) : this() {
      connectionRequest_ = other.connectionRequest_ != null ? other.connectionRequest_.Clone() : null;
      request_ = other.request_ != null ? other.request_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MultiplexedRequest Clone() {
      return new MultiplexedRequest(this);
    }

    /// <summary>Field number for the "connection_request" field.</summary>
    public const int ConnectionRequestFieldNumber = 1;
    private global::KRPC.Schema.KRPC.ConnectionRequest connectionRequest_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::KRPC.Schema.KRPC.ConnectionRequest ConnectionRequest {
      get { return connectionRequest_; }
      set {
        connectionRequest_ = value;
      }
    }

    /// <summary>Field number for the "request" field.</summary>
    public const int RequestFieldNumber = 2;
    private global::KRPC.Schema.KRPC.Request request_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::KRPC.Schema.KRPC.Request Request {
      get { return request_; }
      set {
        request_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MultiplexedRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MultiplexedRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(ConnectionRequest, other.ConnectionRequest)) return false;
      if (!object.Equals(Request, other.Request)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (connectionRequest_ != null) hash ^= ConnectionRequest.GetHashCode();
      if (request_ != null) hash ^= Request.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (connectionRequest_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(ConnectionRequest);
      }
      if (request_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Request);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (connectionRequest_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ConnectionRequest);
      }
      if (request_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Request);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MultiplexedRequest other) {
      if (other == null) {
        return;
      }
      if (other.connectionRequest_ != null) {
        if (connectionRequest_ == null) {
          connectionRequest_ = new global::KRPC.Schema.KRPC.ConnectionRequest();
        }
        ConnectionRequest.MergeFrom(other.ConnectionRequest);
      }
      if (other.request_ != null) {
        if (request_ == null) {
          request_ = new global::KRPC.Schema.KRPC.Request();
        }
        Request.MergeFrom(other.Request);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (connectionRequest_ == null) {
              connectionRequest_ = new global::KRPC.Schema.KRPC.ConnectionRequest();
            }
            input.ReadMessage(connectionRequest_);
            break;
          }
          case 18: {
            if (request_ == null) {
              request_ = new global::KRPC.Schema.KRPC.Request();
            }
            input.ReadMessage(request_);
            break;
          }
        }
      }
    }

  }

  public sealed partial class MultiplexedResponse : pb::IMessage<MultiplexedResponse> {
    private static readonly pb::MessageParser<MultiplexedResponse> _parser = new pb::MessageParser<MultiplexedResponse>(() => new MultiplexedResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MultiplexedResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::KRPC.Schema.KRPC.KrpcReflection.Descriptor.MessageTypes[28]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MultiplexedResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MultiplexedResponse(MultiplexedResponse other) : this() {
      response_ = other.response_ != null ? other.response_.Clone() : null;
      streamUpdate_ = other.streamUpdate_ != null ? other.streamUpdate_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MultiplexedResponse Clone() {
      return new MultiplexedResponse(this);
    }

    /// <summary>Field number for the "response" field.</summary>
    public const int ResponseFieldNumber = 1;
    private global::KRPC.Schema.KRPC.Response response_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::KRPC.Schema.KRPC.Response Response {
      get { return response_; }
      set {
        response_ = value;
      }
    }

    /// <summary>Field number for the "stream_update" field.</summary>
    public const int StreamUpdateFieldNumber = 2;
    private global::KRPC.Schema.KRPC.StreamUpdate streamUpdate_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::KRPC.Schema.KRPC.StreamUpdate StreamUpdate {
      get { return streamUpdate_; }
      set {
        streamUpdate_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MultiplexedResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MultiplexedResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Response, other.Response)) return false;
      if (!object.Equals(StreamUpdate, other.StreamUpdate)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (response_ != null) hash ^= Response.GetHashCode();
      if (streamUpdate_ != null) hash ^= StreamUpdate.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (response_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Response);
      }
      if (streamUpdate_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(StreamUpdate);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (response_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Response);
      }
      if (streamUpdate_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(StreamUpdate);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MultiplexedResponse other) {
      if (other == null) {
        return;
      }
      if (other.response_ != null) {
        if (response_ == null) {
          response_ = new global::KRPC.Schema.KRPC.Response();
        }
        Response.MergeFrom(other.Response);
      }
      if (other.streamUpdate_ != null) {
        if (streamUpdate_ == null) {
          streamUpdate_ = new global::KRPC.Schema.KRPC.StreamUpdate();
        }
        StreamUpdate.MergeFrom(other.StreamUpdate);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (response_ == null) {
              response_ = new global::KRPC.Schema.KRPC.Response();
            }
            input.ReadMessage(response_);
            break;
          }
          case 18: {
            if (streamUpdate_ == null) {
              streamUpdate_ = new global::KRPC.Schema.KRPC.StreamUpdate();
            }
            input.ReadMessage(streamUpdate_);
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
